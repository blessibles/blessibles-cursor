"use client";
import React, { useState, useEffect } from 'react';
import Image from 'next/image';
import { useRouter } from 'next/navigation';
import ProductRecommendations from '../../../components/ProductRecommendations';
import { useCart } from '../../../app/layout';
import { supabase } from '../../../utils/supabaseClient';
import { Collection, getCollections, addToCollection } from '../../../utils/collections';

export default function ProductPage({ params }: { params: { id: string } }) {
  const [product, setProduct] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [collections, setCollections] = useState<Collection[]>([]);
  const [selectedCollection, setSelectedCollection] = useState<string>('');
  const [showCollectionModal, setShowCollectionModal] = useState(false);
  const [addToCollectionMessage, setAddToCollectionMessage] = useState('');
  const router = useRouter();
  const { addToCart } = useCart();

  useEffect(() => {
    loadProduct();
    loadCollections();
  }, [params.id]);

  const loadProduct = async () => {
    try {
      setLoading(true);
      setError(null);
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('id', params.id)
        .single();

      if (error) throw error;
      setProduct(data);
    } catch (err) {
      console.error('Error loading product:', err);
      setError('Failed to load product');
    } finally {
      setLoading(false);
    }
  };

  const loadCollections = async () => {
    try {
      const userCollections = await getCollections();
      setCollections(userCollections);
    } catch (err) {
      console.error('Error loading collections:', err);
    }
  };

  const handleAddToCollection = async () => {
    if (!selectedCollection) {
      setAddToCollectionMessage('Please select a collection');
      return;
    }

    try {
      await addToCollection(selectedCollection, params.id);
      setAddToCollectionMessage('Added to collection successfully!');
      setShowCollectionModal(false);
      setTimeout(() => setAddToCollectionMessage(''), 3000);
    } catch (err) {
      console.error('Error adding to collection:', err);
      setAddToCollectionMessage('Failed to add to collection');
    }
  };

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="animate-pulse">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
            <div className="bg-gray-200 rounded-lg aspect-square"></div>
            <div className="space-y-4">
              <div className="h-8 bg-gray-200 rounded w-3/4"></div>
              <div className="h-6 bg-gray-200 rounded w-1/4"></div>
              <div className="h-4 bg-gray-200 rounded w-full"></div>
              <div className="h-4 bg-gray-200 rounded w-2/3"></div>
              <div className="h-10 bg-gray-200 rounded w-1/3"></div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="text-red-600 bg-red-50 p-4 rounded-lg">
          {error}
        </div>
      </div>
    );
  }

  if (!product) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="text-gray-600">
          Product not found
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
        <div className="relative aspect-square">
          <Image
            src={product.image_url || "https://via.placeholder.com/400x400?text=Product"}
            alt={product.title}
            fill
            className="object-contain rounded-lg"
          />
        </div>
        <div className="space-y-4">
          <h1 className="text-3xl font-bold text-blue-900">{product.title}</h1>
          <p className="text-xl text-blue-700">${product.price}</p>
          <p className="text-gray-600">{product.description}</p>
          <div className="flex flex-wrap gap-2">
            {product.tags?.map((tag: string) => (
              <span key={tag} className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">
                {tag}
              </span>
            ))}
          </div>
          <div className="flex flex-wrap gap-4">
            <button
              onClick={() => addToCart(product)}
              className="px-6 py-3 bg-blue-700 text-white font-semibold rounded-lg shadow hover:bg-blue-800 transition"
            >
              Add to Cart
            </button>
            <button
              onClick={() => setShowCollectionModal(true)}
              className="px-6 py-3 bg-white text-blue-700 font-semibold rounded-lg shadow hover:bg-blue-50 transition border border-blue-700"
            >
              Add to Collection
            </button>
          </div>
          {addToCollectionMessage && (
            <div className={`p-3 rounded-lg ${
              addToCollectionMessage.includes('success') ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700'
            }`}>
              {addToCollectionMessage}
            </div>
          )}
        </div>
      </div>

      {/* Collection Modal */}
      {showCollectionModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h2 className="text-xl font-bold text-blue-900 mb-4">Add to Collection</h2>
            <select
              value={selectedCollection}
              onChange={(e) => setSelectedCollection(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded-lg mb-4"
            >
              <option value="">Select a collection</option>
              {collections.map((collection) => (
                <option key={collection.id} value={collection.id}>
                  {collection.name}
                </option>
              ))}
            </select>
            <div className="flex justify-end gap-4">
              <button
                onClick={() => setShowCollectionModal(false)}
                className="px-4 py-2 text-gray-600 hover:text-gray-800"
              >
                Cancel
              </button>
              <button
                onClick={handleAddToCollection}
                className="px-4 py-2 bg-blue-700 text-white rounded-lg hover:bg-blue-800"
              >
                Add
              </button>
            </div>
          </div>
        </div>
      )}

      <ProductRecommendations
        productId={params.id}
        type="similar"
        title="You May Also Like"
        className="mt-12"
      />
    </div>
  );
} 